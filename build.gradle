plugins {
    id 'java-library'
    id 'jacoco'
    id 'base'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.16.0'
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

gradleLint {
    rules = ['unused-dependency']
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.7"
}


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}


def jacksonVersion = "2.10.3"
def awsSdkVersion = "1.11.871"
def jupiterVersion = "5.7.0"
def log4jVersion = "2.13.2"


apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'base'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

dependencies {
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'

    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: awsSdkVersion
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: awsSdkVersion
    runtimeOnly group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.6.0'
    runtimeOnly group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: awsSdkVersion
    implementation('org.zalando:problem:0.25.0') {
        dependencies {
            compileOnly(group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.0') {
                because 'Dependency has maven scope provided'
            }
        }
    }
    api group: 'org.zalando', name: 'jackson-datatype-problem', version: '0.25.0'
    runtimeOnly group: 'com.amazonaws', name: 'aws-java-sdk-api-gateway', version: awsSdkVersion
    gradleLint.ignore('unused-dependency') {
        api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
        api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
        api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
        runtimeOnly group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jacksonVersion
        api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    }
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.11'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: '0.1.14'

    testImplementation(group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4') {
        because 'Scope provided in junit-jupiter'
    }

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiterVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion


    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.6.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'com.github.npathai', name: 'hamcrest-optional', version: '2.0.0'
    // If one is using nva-commons, api allows the re-usage of these packages.

    gradleLint.ignore('unused-dependency') {
        api group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.1.1'
        api group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
        api group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
        api group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: log4jVersion
        api(group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4') {
            because 'Because we use the library directly to define loggers in our code'
        }
    }
}

test {
    useJUnitPlatform {
    }
    failFast = true
    finalizedBy jacocoTestReport
    testLogging {
        events 'failed', 'passed', 'skipped'
    }
    Map<String, String> envVariables = new HashMap<>()
    envVariables.put("EXISTING_NON_EMPTY_VARIABLE", "SomeContent")
    envVariables.put("EXISTING_EMPTY_VARIABLE", "  ")
    environment(envVariables)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}


def getProjectList() {
    // These projects are considered. Replace with a different list as needed.
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {  // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect {it.classDirectories}.findAll {it != null}
        })
        sourceDirectories.from project.files({
            reportTasks.collect {it.sourceDirectories}.findAll {it != null}
        })
    }

    reports {
        xml.enabled true
    }
}

build {
    dependsOn jacocoRootReport
}
