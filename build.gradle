plugins {
    id 'nva.root-module-conventions'
    id 'signing'
    alias(libs.plugins.nexus.publish)
    alias(libs.plugins.gradle.versions)
}

allprojects {
    group = findProperty("GROUP")
    version = findProperty("VERSION_NAME")
    nva {
        spotlessEnabled = false
        spotlessEnforced = false
    }
}

// Configure publishing of each sub-project
apply from: "$rootDir/gradle/shared-publish.gradle"
subprojects {
    plugins.withId('maven-publish') {
        publishing {
            publications.withType(MavenPublication).configureEach {
                pom(configureCommonPom)
            }
        }

        signing {
            required = isMainBranch()
            useInMemoryPgpKeys(findProperty('signingKey'),
                    findProperty('signingPassword'))
            sign publishing.publications
        }

        afterEvaluate {
            tasks.named('publishToMavenLocal') {
                dependsOn(gradle.includedBuild('build-logic').task(':publishToMavenLocal'))
            }
            tasks.named("publishToSonatype") {
                dependsOn(gradle.includedBuild("build-logic").task(":publishToSonatype"))
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty("sonatypeUsername")
            password = findProperty("sonatypePassword")
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }

    clientTimeout = Duration.ofSeconds(600)
    connectTimeout = Duration.ofSeconds(60)
}
