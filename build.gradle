plugins {
    id 'java-library'
    id 'jacoco'
    id 'base'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.15.9'
    id 'maven'
    id 'com.jfrog.bintray' version '1.7'
}


wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.7"
}

allprojects {
    group = 'no.unit.nva'
    version = '1.0.3'

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'base'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    gradleLint {
        rules = ['unused-dependency']
    }

    project.ext {
        jacksonVersion = "2.12.0"
        awsSdkVersion = "1.11.931"
        awsSdk2Version = '2.15.74'
        jupiterVersion = "5.7.0"
        log4jVersion = "2.13.2"
        nvaTestUtilsVersion = "0.1.16"
    }

    test {
        useJUnitPlatform {
        }
        failFast = true
        finalizedBy jacocoTestReport
        testLogging {
            events 'failed', 'passed', 'skipped'
        }
        Map<String, String> envVariables = new HashMap<>()
        envVariables.put("EXISTING_NON_EMPTY_VARIABLE", "SomeContent")
        envVariables.put("EXISTING_EMPTY_VARIABLE", "  ")
        environment(envVariables)
    }


    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }


    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }
        }
    }
}
subprojects {

    apply plugin: 'maven'
    dependencies {

        // This method contains the logger class for AWS Lambda functions.
        api (group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.1.1'){
            exclude group: "org.apache.logging.log4j", module: "log4j-core:2.8.2"
            exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
            exclude group:"com.amazonaws", module:"aws-lambda-java-core"
            exclude group:'org.apache.logging.log4j', module:'log4j-core'
        }

        api (group: 'com.amazonaws',name: 'aws-lambda-java-core', version:'1.2.1'){
            exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
            exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jsr310"
            exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
            exclude group: "org.apache.logging.log4j", module: "log4j-core:2.8.2"
        }
        api(group: 'org.zalando', name: 'jackson-datatype-problem', version: '0.25.0') {
            exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
            exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jsr310"
            exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
        }

        api group: 'org.apache.logging.log4j', name: 'log4j-core', version: project.ext.log4jVersion
        api group: 'org.apache.logging.log4j', name: 'log4j-api', version: project.ext.log4jVersion
        api group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: project.ext.log4jVersion
        api(group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4') {
            because 'Because we use the library directly to define loggers in our code'
        }

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.ext.jacksonVersion

        compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: project.ext.jacksonVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: project.ext.jacksonVersion


        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.ext.jupiterVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.ext.jupiterVersion
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.ext.jupiterVersion

        compileOnly (group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.1'){
            because ("junit.jupiter version 5 depends on it and testImplementation seems not enough")
        }

        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.6.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'com.github.npathai', name: 'hamcrest-optional', version: '2.0.0'
        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: '0.1.14'

    }

    // publish submodules
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    bintray {
        dryRun = project.hasProperty('bintrayDryRun') ? project.property('bintrayDryRun') : false
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        configurations = ['archives']
        pkg {
            repo = 'nva-commons'
            name = project.name
            userOrg = 'unit-nva'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/BIBSYSDEV/nva-commons.git'
            version {
                name = version
            }
        }
    }
}

def getProjectList() {
    // These projects are considered. Replace with a different list as needed.
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {
        // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect { it.classDirectories }.findAll { it != null }
        })
        sourceDirectories.from project.files({
            reportTasks.collect { it.sourceDirectories }.findAll { it != null }
        })
    }

    reports {
        xml.enabled true
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

task bintraySubprojects {
    def branch = gitBranch()
    if (!(branch == "master" || branch == "main")) {
        logger.warn("Warning: Can only publish to Bintray from master or main branch")
        return
    }

    // define which subprojects to publish to bintray
    dependsOn ':apigateway:bintrayUpload'
    dependsOn ':core:bintrayUpload'
    dependsOn ':doi:bintrayUpload'
    dependsOn ':eventhandlers:bintrayUpload'
    dependsOn ':identifiers:bintrayUpload'
    dependsOn ':lambdaauthorizer:bintrayUpload'
    dependsOn ':logutils:bintrayUpload'
    dependsOn ':secrets:bintrayUpload'
}

build {
    dependsOn jacocoRootReport
}