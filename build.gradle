plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.2.2"
}


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}


def jacksonVersion = "2.10.3"
def awsSdkVersion = "1.11.739"
def jupiterVersion = "5.6.1"
def log4jVersion = "2.13.2"


apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

dependencies {

    implementation platform('software.amazon.awssdk:bom:2.13.8')
    api 'software.amazon.awssdk:lambda'

    implementation 'com.amazonaws:aws-lambda-java-core:1.2.0'
    implementation 'com.amazonaws:aws-lambda-java-events:2.2.7'
    implementation 'com.amazonaws:aws-java-sdk-lambda:1.11.749'
    implementation group: 'org.zalando', name: 'problem', version: '0.23.0'
    implementation group: 'org.zalando', name: 'jackson-datatype-problem', version: '0.23.0'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-api-gateway', version: awsSdkVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jacksonVersion

    testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: '0.1.6'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: jupiterVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    // If one is using nva-commons, api allows the re-usage of these packages.
    api group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    api group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.1.0'
    api group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: log4jVersion

}

test {
    useJUnitPlatform {
    }
    failFast = true
    finalizedBy jacocoTestReport
    testLogging {
        events 'failed', 'passed', 'skipped'
    }
    Map<String, String> envVariables = new HashMap<>();
    envVariables.put("EXISTING_NON_EMPTY_VARIABLE", "SomeContent")
    envVariables.put("EXISTING_EMPTY_VARIABLE", "  ")
    environment(envVariables)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

shadowJar {
// Transformation for merging Log4j2Plugins.dat files.
transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}



tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}
